# HAL config file for Pico Systems USC board
#
# Connect motion controller I/Os
# HURCO BMC30 JAKE FREESE 11/11/2016

loadrt message names=EstopWrite,motion.enable,air-alarm messages="EMERGENCY STOP,MOTION-DISABLE,LOW AIR PRESSURE"
addf EstopWrite servo-thread
addf motion.enable servo-thread
addf air-alarm servo-thread

# connect limit/home switch outputs to motion controller
newsig Xminlim bit
newsig Xmaxlim bit
newsig Xhome bit
net Xmaxlim axis.0.pos-lim-sw-in ppmc.0.din.01.in-not
net Xminlim axis.0.neg-lim-sw-in ppmc.0.din.02.in-not
net Xmaxlim axis.0.home-sw-in

newsig Yminlim bit
newsig Ymaxlim bit
newsig Yhome bit
net Ymaxlim axis.1.pos-lim-sw-in ppmc.0.din.03.in-not
net Yminlim axis.1.neg-lim-sw-in ppmc.0.din.04.in-not
net Ymaxlim axis.1.home-sw-in

newsig Zminlim bit
newsig Zmaxlim bit
newsig Zhome bit
net Zmaxlim axis.2.pos-lim-sw-in ppmc.0.din.06.in-not
net Zminlim axis.2.neg-lim-sw-in ppmc.0.din.05.in-not
net Zmaxlim axis.2.home-sw-in

#newsig Aminlim bit
#newsig Amaxlim bit
#newsig Ahome bit
#net Aminlim axis.3.neg-lim-sw-in ppmc.0.din.10.in-not
#net Amaxlim axis.3.pos-lim-sw-in ppmc.0.din.11.in-not
#net Xminlim axis.3.home-sw-in


# Servo Alarms  ALL ALARMS DI0
net amp-fault-x axis.0.amp-fault-in ppmc.0.din.00.in

# connect index pulses to motion controller
# do these when index pulsing is figured out
newsig Xindex bit
newsig Yindex  bit
newsig Zindex bit
linksp Xindex <= ppmc.0.encoder.00.index-enable
linksp Xindex => axis.0.index-enable
linksp Yindex <= ppmc.0.encoder.01.index-enable
linksp Yindex => axis.1.index-enable
linksp Zindex <= ppmc.0.encoder.02.index-enable
linksp Zindex => axis.2.index-enable

#
# Connect I/O controller I/Os
#

# connect e-stop write/sense to I/O controller
# and ppmc's fault with estop's output, so  estop FF is reset, but
#      prevent continued estop signal from ppmc from holding FF cleared
net ppmcEstop ppmc.0.din.estop.in
net ppmcEstop and2.0.in0
net EstopOkIn estop-latch.0.fault-in
net EstopOkIn and2.0.out
net EstopOkOut ppmc.0.dout.07.out
net EstopOkOut ppmc.0.dout.Estop.out
net EstopOkOut iocontrol.0.emc-enable-in
net EstopOkOut estop-latch.0.ok-out
net EstopOkOut and2.0.in1
net emc-estop-out iocontrol.0.user-enable-out
net emc-estop-out estop-latch.0.ok-in
net emc-estop-reset iocontrol.0.user-request-enable
net emc-estop-reset estop-latch.0.reset

#loadrt message names=ppmcEstop messages="OH SHIT"
#addf ppmcEstop iocontrol
#setp ppmcEstop.edge 0 #this pin should be active low
#net ppmcEstop motion.enable ppmc.0.din.estop.trigger


#newsig EstopSense bit
#newsig EstopWrite bit
#linksp EstopSense <= ppmc.0.din.estop.in-not
#linksp EstopSense => iocontrol.0.emc-enable-in
#linksp EstopWrite <= ppmc.0.dout.07.out
#linksp EstopWrite => iocontrol.0.user-enable-out
#estop may need to be inverted

# Servo enable     SSR7
net Xenable <= axis.0.amp-enable-out ppmc.0.dout.06.out

# connect spindle fwd/rev to I/O controller Spindle Forward Run 1 SSR 8
# newsig SpindleOn bit
# net SpindleOn motion.spindle-on ppmc.0.dout.08.out

# Servo Alarm Reset          SSR 4
#net "" motion."" ppmc.0.dout.04.out

# Low Speed Winding Select   SSR 5
#net "" motion."" ppmc.0.dout.05.out
# Orient Command             SSR 6
#net spindle.orient motion.spindle-orient ppmc.0.dout.06.out
# Orient Complete            DI 14  
#net spindle-is-oriented motion.spindle-is-oriented ppmc.0.din.14.in
# Spindle Alarm              DI 15
#net amp-fault-S axis.S.amp-fault-in ppmc.0.din.15.in

# connect spindle speed up/down to I/O controller  Speed command on DAC CARD
#newsig SpindleUp bit
#newsig SpindleDown bit
#linksp SpindleUp <= ppmc.0.dout.06.out
#linksp SpindleUp => motion.spindle-incr-speed
#linksp SpindleDown <= ppmc.0.dout.05.out
#linksp SpindleDown => motion.spindle-decr-speed

# connect mist/flood coolant to I/O controller  SSR 16 
#net coolant-mist iocontrol.0.coolant-mist ppmc.0.dout.14.out
net coolant-flood iocontrol.0.coolant-flood ppmc.0.dout.15.out


# Way Lube Pump combined with servo on
# Way Lube Level      DI 27
net lube_level iocontrol.0.lube_level ppmc.0.din.27.in
#loadrt message names=lube_level messages="LOW LUBE"
#addf lube_level iocontrol
#setp lube_level.edge 0 #this pin should be active low
#net lube_level iocontrol.0.lube_level ppmc.0.din.27.trigger


# Air Pressure Switch DI 28 
net air-alarm motion.enable ppmc.0.din.28.in-not


# X Torque            DI 16
#net "" iocontrol ppmc.0.din.16.in

# Y Torque            DI 17
#net "" iocontrol ppmc.0.din.17.in

# Z Torque            DI 18
#net "" iocontrol ppmc.0.din.18.in

# S Torque            DI 19
#net "" iocontrol ppmc.0.din.19.in

# TOOL CHANGER
# Mag POS             DI 20
#net "" iocontrol ppmc.0.din.20.in

# Mag Right           DI 21  SSR 11
#net "" iocontrol ppmc.0.din.21.in
#net "" iocontrol ppmc.0.dout.11.out

# Mag Left            DI 22  SSR 12
#net "" iocontrol ppmc.0.din.22.in
#net "" iocontrol ppmc.0.dout.12.out


# Mag Down            DI 23  SSR 13
#net "" iocontrol ppmc.0.din.23.in
#net "" iocontrol ppmc.0.dout.13.out


# Mag UP              DI 24  SSR 14
#net "" iocontrol ppmc.0.din.24.in
#net "" iocontrol ppmc.0.dout.14.out


# Mag REF             DI 25 
#net "" iocontrol ppmc.0.din.25.in

# Tool Unclamp BUTTON    DI 26
#net release-button iocontrol ppmc.0.din.26.in

# Tool Unclamp        SSR 10
#net release-tool iocontrol ppmc.0.dout.10.out

# Spindle Limit +     DI 11
#net spindle-locked motion.spindle-locked ppmc.0.din.11.in
#net spindle-inhibit motion.spindle-inhibit ppmc.0.din.11.in-not

# Mag ROTATE          SSR 9
#net "" iocontrol ppmc.0.dout.10.out

# Tool Caroseul rotate button DI29
#net "" iocontrol ppmc.0.din.29.in


#TOUCH PROBE
#WAKE UP PROBE
#net "" iocontrol ppmc.0.dout.20.out
#INPUT FROM PROBE
#net "" iocontrol ppmc.0.din.20.in
